use std::str::FromStr;
use std::net::IpAddr;

use lalrpop_util::ErrorRecovery;
use trust_dns::rr::Name;

use system_conf::resolv_conf_ast::*;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, (usize, &'input str), ()>>);

//pub configuration: Vec<ConfigOption> {}

pub comment: () = r"[#;][^\n]*" => ();

// pub config_option: ConfigOption = {} 

pub basic_option: BasicOption = {
	"nameserver" <i:ip_addrs> => BasicOption::Nameserver(i),
	"domain" <n:name> => BasicOption::Domain(n),
	"search" <n:names> => BasicOption::Search(n),	
};

pub ip_addrs: Vec<IpAddr> = ip_addr+ => <>;
pub names: Vec<Name> = name+ => <>;

pub ip_addr: IpAddr = r"([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|(?:[0-9a-f]{0,4}:){2,7}[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}|(?:[0-9a-f]{0,4}:){2,7}[0-9a-f]{1,4})" => IpAddr::from_str(<>).expect("failed to parse IpAddr");

// gah, needed the capture statement!
pub name: Name = r"([^#;\.\s](?:[\w\S]+\.)+|\.)" => Name::from_str(<>).expect("failed to parse Name");